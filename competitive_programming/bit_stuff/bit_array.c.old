#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void set_bit(int A[], int k)
{
	int i, pos;
	unsigned int flag = 1;
	i = k / 32; // gives the index in the array
	printf("i: %d k: %d\n", i, k);
	pos = k % 32; // gits the bit position in A[i]
	flag = flag << pos; // shift k positions	
	printf("flag: %d \n", flag);
	A[i] = A[i] | flag;
}

void test_bit(int A[], int k)
{
	int i, pos;
	unsigned int flag = 1;
	i = k / 32;
	pos = k % 32;
	flag = flag << pos;
	if (A[i] & flag) { // test the bit at the k-th position in A[i]
		// k-th bit is 1
		printf("1\n");
	} else {
		// is 0
		printf("0\n");
	}

}

void divide(unsigned short n)
{
	unsigned short remainder, result;
	int num;

	while (n != 0) {
		remainder = n % 2;
		n /= 2;
		printf("%d ", remainder);
	}
	printf("\n");

}


void main(void)
{
	int A[8];
	int j;
	memset(A, 0, 1); // clear the bit array
	printf("\n");
	for (j = 0; j < 8; j+=2)
		set_bit(A, j);
	for (j = 0; j < 8; j++)
		test_bit(A, j);

}
